<!DOCTYPE html>
<html lang="ja">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=EDGE" />
    <meta charset="utf-8" />
    <title>MT5 test result viewer</title>
    <style>
      html {
        width: 95%;
        height: 95%;
        font-family: "consolas";
        margin: auto;
      }

      body {
        width: 100%;
        height: 100%;
      }

      #root {
        width: 100%;
        height: 100%;
      }

      #container {
        display: flex;
        width: 100%;
        height: 100%;
      }

      #left-area {
        width: 800px;
        height: 100%;
        margin-right: 50px;
      }

      #left-container {
        display: flex;
        flex-direction: column;
        height: 100%;
      }

      #chart-settings {
        height: 120px;
      }

      #right-area {
        flex: 1;
        height: 100%;
      }

      #right-container {
        display: flex;
        flex-direction: column;
        height: 100%;
      }

      #result-list {
        overflow: auto;
        height: 30%;
      }

      #result-list th {
        font-size: small;
      }

      #result-list tr:focus {
        background-color: antiquewhite;
      }

      #result-list th,
      #result-list td {
        border: 1px solid #cccccc;
      }

      #chart {
        flex: 1;
      }

      h1 {
        font-size: small;
        font-family: "メイリオ";
      }

      h1:before {
        content: "■";
      }

      .area {
        border: 1px solid #cccccc;
        padding: 15px;
        margin: 15px;
      }
    </style>
  </head>
  <!-- prettier-ignore -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js" integrity="sha512-WFN04846sdKMIP5LKNphMaWzU7YpMyCU245etK3g/2ARYbPK9Ub18eG+ljU96qKRCWh+quCY7yefSmlkQw1ANQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <!-- prettier-ignore -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
  <!-- prettier-ignore -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.31.3/js/jquery.tablesorter.min.js" integrity="sha512-qzgd5cYSZcosqpzpn7zF2ZId8f/8CHmFKZ8j7mU4OUXTNRd5g+ZHBPsgKEwoqxCtdQvExE5LprwwPAgoicguNg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <!-- prettier-ignore -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highcharts/10.1.0/highcharts.js" integrity="sha512-8mNMOCKB2dbqlbvEAC4C4aMIioDavSLzEHF4P/A+V8ODWoaRnBz4zar7CGM8o1teyAV1sI7n6NhMLfgNZThWIA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script src="https://code.highcharts.com/modules/exporting.js"></script>
  <script src="https://code.highcharts.com/modules/offline-exporting.js"></script>
  <script src="https://code.highcharts.com/modules/export-data.js"></script>
  <!-- prettier-ignore -->
  <script src="https://unpkg.com/react@16/umd/react.development.js" crossorigin></script>
  <!-- prettier-ignore -->
  <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js" crossorigin></script>
  <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>

  <script type="text/babel">
    const shell = new ActiveXObject("WScript.Shell");
    const fs = new ActiveXObject("Scripting.FileSystemObject");

    const CSV_KEY_DATE = "DATE";
    const CSV_KEY_GRID_BUY_COUNT = "GRID_BUY_COUNT";
    const CSV_KEY_GRID_BUY_PROFIT = "GRID_BUY_PROFIT";
    const CSV_KEY_GRID_SELL_COUNT = "GRID_SELL_COUNT";
    const CSV_KEY_GRID_SELL_PROFIT = "GRID_SELL_PROFIT";
    const CSV_KEY_HEDGE_BUY_COUNT = "HEDGE_BUY_COUNT";
    const CSV_KEY_HEDGE_BUY_PROFIT = "HEDGE_BUY_PROFIT";
    const CSV_KEY_HEDGE_SELL_COUNT = "HEDGE_SELL_COUNT";
    const CSV_KEY_HEDGE_SELL_PROFIT = "HEDGE_SELL_PROFIT";
    const CSV_KEY_BALANCE = "BALANCE";
    const CSV_KEY_MARGIN = "MARGIN";

    $(function () {
      const root = $("#root");
      ReactDOM.render(<RootComponent />, root[0]);
    });

    const showChart = (chartData) => {
      // extract values from chartData
      const extract = (label) => {
        const values = [];
        for (let i = 0; i < chartData.length; i++) {
          const rowObj = chartData[i];
          const value = rowObj[label];
          values.push(value);
        }
        return values;
      };

      // extract numeric values and min/max from chartData
      const extractValues = (label) => {
        const values = [];
        let min = Number.MAX_VALUE;
        let max = Number.MIN_VALUE;
        for (let i = 0; i < chartData.length; i++) {
          const rowObj = chartData[i];
          const value = Number(rowObj[label]);
          values.push(value);
          if (value > max) {
            max = value;
          }
          if (value < min) {
            min = value;
          }
        }
        return { min, max, values };
      };

      const gridBuyProfit = extractValues(CSV_KEY_GRID_BUY_PROFIT);
      const gridSellProfit = extractValues(CSV_KEY_GRID_SELL_PROFIT);
      const hedgeBuyProfit = extractValues(CSV_KEY_HEDGE_BUY_PROFIT);
      const hedgeSellProfit = extractValues(CSV_KEY_HEDGE_SELL_PROFIT);
      const balance = extractValues(CSV_KEY_BALANCE);
      const margin = extractValues(CSV_KEY_MARGIN);

      // get max value for yAxis
      const profitMinMax = [];
      profitMinMax.push(Math.abs(gridBuyProfit.max));
      profitMinMax.push(Math.abs(gridBuyProfit.min));
      profitMinMax.push(Math.abs(gridSellProfit.max));
      profitMinMax.push(Math.abs(gridSellProfit.min));
      profitMinMax.push(Math.abs(hedgeBuyProfit.max));
      profitMinMax.push(Math.abs(hedgeBuyProfit.min));
      profitMinMax.push(Math.abs(hedgeSellProfit.max));
      profitMinMax.push(Math.abs(hedgeSellProfit.min));
      const profitMinMaxMax = _.max(profitMinMax);

      // get max value for yAxis
      const accountMinMax = [];
      accountMinMax.push(Math.abs(balance.max));
      accountMinMax.push(Math.abs(balance.min));
      accountMinMax.push(Math.abs(margin.max));
      accountMinMax.push(Math.abs(margin.min));
      const accountMinMaxMax = _.max(accountMinMax);
      const accountMinMaxMin = _.min(accountMinMax);

      const createYAxis = () => {
        const yAxis = {
          title: { text: "残高(JPY)" },
          min: accountMinMaxMin,
          max: accountMinMaxMax,
          labels: {
            formatter: function () {
              return this.value.toLocaleString();
            },
          },
        };
        const yAxis2 = _.clone(yAxis);
        yAxis2.opposite = true;
        return [yAxis, yAxis2];
      };

      // prettier-ignore
      const createSeries = function () {
        const seriesList = [];
        seriesList.push({
          name: "口座残高",
          type: "spline",
          yAxis: 0,
          data: balance.values,
          color: "red"
        });
        seriesList.push({
          name: "証拠金残高",
          type: "spline",
          yAxis: 0,
          data: margin.values,
          color: "blue"
        });
        // const createSeriesItem = (name, type, yAxis, data, zIndex, color) => {
        //   return { name, type, yAxis, data, zIndex, color, };
        // };
        // const createProfitSeriesItem = (use, name, data, color) => {
        //   if (use && targetItemIndexMap["positionProfit"] != null) {
        //     const item = createSeriesItem(name, "spline", targetItemIndexMap["positionProfit"], data, 2, color);
        //     seriesList.push(item);
        //   }
        // };
        // const createCountSeriesItem = (use, name, data, color) => {
        //   if (use && targetItemIndexMap["positionCount"] != null) {
        //     const item = createSeriesItem(name, "column", targetItemIndexMap["positionCount"], data, 1, color);
        //     seriesList.push(item);
        //   }
        // };
        // const createAccountSeriesItem = (use, name, data, color) => {
        //   if (use && targetItemIndexMap["account"] != null) {
        //     const item = createSeriesItem(name, "area", targetItemIndexMap["account"], data, 1, color);
        //     seriesList.push(item);
        //   }
        // };
        // createProfitSeriesItem(chartSettings.gridBuyProfitChecked, "損益(グリッド/買)", gridBuyProfit, "red");
        // createCountSeriesItem(chartSettings.gridBuyCountChecked, "ポジション数(グリッド/買)", extract("gridBuyCount", Number), "red");
        // createProfitSeriesItem(chartSettings.gridSellProfitChecked, "損益(グリッド/売)", gridSellProfit, "blue");
        // createCountSeriesItem(chartSettings.gridSellCountChecked, "ポジション数(グリッド/売)", extract("gridSellCount", Number), "blue");
        // createProfitSeriesItem(chartSettings.hedgeBuyProfitChecked, "損益(ヘッジ/買)", hedgeBuyProfit, "green");
        // createCountSeriesItem(chartSettings.hedgeBuyCountChecked, "ポジション数(ヘッジ/買)", extract("hedgeBuyCount", Number), "green");
        // createProfitSeriesItem(chartSettings.hedgeSellProfitChecked, "損益(ヘッジ/売)", hedgeSellProfit, "orange");
        // createCountSeriesItem(chartSettings.hedgeSellCountChecked, "ポジション数(ヘッジ/売)", extract("hedgeSellCount", Number), "orange");
        // createAccountSeriesItem(chartSettings.balanceChecked, "残高", balance, "mistyrose");
        // createAccountSeriesItem(chartSettings.freeMarginChecked, "余裕証拠金", freeMargin, "lightblue");
        return seriesList;
      };

      const yAxis = createYAxis();
      const series = createSeries();
      Highcharts.chart("chart", {
        chart: {
          zoomType: "xy",
        },
        // title: {
        //   text: csvInfo.paramString,
        // },
        xAxis: [
          {
            categories: extract(CSV_KEY_DATE),
            crosshair: true,
          },
        ],
        yAxis: yAxis,
        series: series,
        plotOptions: {
          spline: {
            lineWidth: 5,
          },
          column: {
            stacking: "normal",
            dataLabels: {
              enabled: false,
            },
          },
        },
        exporting: {
          sourceWidth: 1920,
          sourceHeight: 1080,
          scale: 1,
        },
      });
    };

    const filterResultList = (list, condition) => {
      const keys = Object.keys(condition);
      return list.filter((item) => {
        let result = true;
        for (let i = 0; i < keys.length; i++) {
          const a = condition[keys[i]];
          if (a == "") {
            continue;
          }
          const b = item.condition[keys[i]];
          if (a != b) {
            result = false;
          }
        }
        return result;
      });
    };

    class RootComponent extends React.Component {
      constructor(props) {
        super(props);
        const resultList = loadResultList();
        const header = resultList.header;
        const body = resultList.body;
        const paramListMap = resultList.paramListMap;
        const filterCondition = {};
        Object.keys(paramListMap).forEach((k) => {
          const values = paramListMap[k];
          if (values.length > 1) {
            filterCondition[k] = "";
          } else {
            filterCondition[k] = values[0];
          }
        });

        // const csvFiles = dirInfo.allCsvFiles.map((f) => {
        //   return f.csvFile;
        // });
        // const csvInfo = []; //loadCsv(csvFiles[initialCsvFileIndex]);
        // const initialCsvFileFilterCondition = {};
        // Object.keys(dirInfo.paramListMap).forEach((k) => {
        //   const values = dirInfo.paramListMap[k];
        //   if (values.length > 1) {
        //     initialCsvFileFilterCondition[k] = "";
        //   } else {
        //     initialCsvFileFilterCondition[k] = values[0];
        //   }
        // });
        // this.state = {
        //   chartSettings: new ChartSettings(),
        //   csvFileIndex: initialCsvFileIndex,
        //   csvFiles,
        //   allCsvFiles: dirInfo.allCsvFiles,
        //   firstLines: dirInfo.firstLines,
        //   lastLines: dirInfo.lastLines,
        //   csvInfo,
        //   dirInfo,
        //   csvFileFilterCondition: initialCsvFileFilterCondition,
        // };
        this.state = {
          fileName: null,
          header,
          body,
          paramListMap,
          filterCondition,
        };
      }
      render() {
        // const updateChartSettings = (obj) => {
        //   const chartSettings = _.merge({}, this.state.chartSettings, obj);
        //   this.setState({ chartSettings });
        // };

        const updateFileName = (fileName) => {
          this.setState({ fileName });
        };

        // const setCsvInfo = (csvInfo) => {
        //   this.setState({ csvInfo });
        // };

        const updateFilterCondition = (newFilterCondition) => {
          const filterCondition = _.merge(
            {},
            this.state.filterCondition,
            newFilterCondition
          );
          this.setState({ filterCondition, fileName: null });
        };

        // return (
        //   <React.Fragment>
        //     <ChartSettingsComponent
        //       chartSettings={this.state.chartSettings}
        //       updateChartSettings={updateChartSettings}
        //     />
        //     <FileSelectionComponent
        //       csvFiles={this.state.csvFiles}
        //       csvFileIndex={this.state.csvFileIndex}
        //       setCsvFileIndex={setCsvFileIndex}
        //       setCsvInfo={setCsvInfo}
        //     />
        //     <div class="clearfix">
        //       <FileFilterComponent
        //         csvFileFilterCondition={this.state.csvFileFilterCondition}
        //         paramListMap={this.state.dirInfo.paramListMap}
        //         updateCsvFileFilterCondition={updateCsvFileFilterCondition}
        //         setCsvFileIndex={setCsvFileIndex}
        //       />
        //       <ChartComponent
        //         chartSettings={this.state.chartSettings}
        //         csvInfo={this.state.csvInfo}
        //       />
        //       <ResultListComponent
        //         firstLines={this.state.firstLines}
        //         lastLines={this.state.lastLines}
        //       />
        //     </div>
        //   </React.Fragment>
        // );
        return (
          <React.Fragment>
            <div id="container">
              <div id="left-area">
                <div id="left-container">
                  <ChartSettingsComponent />
                  <FileFilterComponent
                    paramListMap={this.state.paramListMap}
                    filterCondition={this.state.filterCondition}
                    updateFilterCondition={updateFilterCondition}
                  />
                </div>
              </div>
              <div id="right-area">
                <div id="right-container">
                  <ResultListComponent
                    header={this.state.header}
                    body={filterResultList(
                      this.state.body,
                      this.state.filterCondition
                    )}
                    updateFileName={updateFileName}
                    fileName={this.state.fileName}
                  />
                  <ChartComponent fileName={this.state.fileName} />
                </div>
              </div>
            </div>
          </React.Fragment>
        );
      }
    }

    class ChartSettingsComponent extends React.Component {
      constructor(props) {
        super(props);
      }

      render() {
        return (
          <div id="chart-settings" className="area">
            <h1>表示対象</h1>
            <select>
              <option>残高・証拠金</option>
              <option>ポジション数</option>
              <option>ポジション含み益</option>
            </select>
          </div>
        );
      }
    }

    const ResultListComponent = (props) => {
      const header = props.header;
      const body = props.body;
      const onClick = (e) => {
        const tr = $(e.currentTarget);
        const fileName = tr.attr("data-filename");
        tr.focus();
        props.updateFileName(fileName);
      };
      React.useEffect(() => {
        $(document).off("keydown", "#result-list tr");
        $(document).on("keydown", "#result-list tr", (e) => {
          const tr = $(e.currentTarget);
          const index = tr.attr("data-index");
          let nextIndex = index;
          switch (e.keyCode) {
            case 38: // ↑
              nextIndex = index - 1;
              break;
            case 40: // ↓
              nextIndex = index - 0 + 1;
              break;
            default:
              return;
          }
          if (nextIndex < 0) {
            nextIndex = body.length - 1;
          }
          if (nextIndex == body.length) {
            nextIndex = 0;
          }
          const nextLine = body[nextIndex];
          const nextTr = $(`#result-list tr[data-index='${nextIndex}']`);
          nextTr.focus();
          const nextFileName = body[nextTr.attr("data-index")].fileName;
          props.updateFileName(nextFileName);
        });
      }, [body]);
      let index = 0;
      return (
        <div id="result-list">
          <h1>テスト結果一覧</h1>
          <span>
            selected: {props.fileName == null ? "none" : props.fileName}
          </span>
          <table>
            <tr>
              {header.map((item) => {
                return <th>{item}</th>;
              })}
            </tr>
            {body.map((item) => {
              const ret = (
                <tr
                  onClick={onClick}
                  data-index={index}
                  data-filename={item.fileName}
                  tabIndex={index}
                >
                  {item.data.map((value) => {
                    let v = value.split("/");
                    if (v.length > 1) {
                      v = v[0];
                    }
                    return <td>{v}</td>;
                  })}
                </tr>
              );
              index++;
              return ret;
            })}
          </table>
        </div>
      );
    };

    const ChartComponent = (props) => {
      React.useEffect(() => {
        if (props.fileName == null) {
          return;
        }
        const chartData = loadCsv(props.fileName);
        showChart(chartData);
      }, props.fileName);
      return <div id="chart"></div>;
    };

    class FileFilterComponent extends React.Component {
      constructor(props) {
        super(props);
      }

      render() {
        return (
          <div id="file-filter" className="area">
            <h1>テスト結果絞り込み</h1>
            <table>
              {Object.keys(this.props.paramListMap).map((k) => {
                const values = _.clone(this.props.paramListMap[k]);

                // add blank item when length > 1
                if (values.length > 1) {
                  values.unshift("");
                }

                const onChange = (e) => {
                  const newValue = e.target.value;
                  this.props.updateFilterCondition({ [k]: newValue });
                };

                return (
                  <React.Fragment>
                    <tr>
                      <td>
                        <span>{k}</span>
                      </td>
                      <td>
                        <select
                          onChange={onChange}
                          disabled={values.length == 1}
                        >
                          {values.map((value) => {
                            let v = value.split("/");
                            if (v.length > 1) {
                              v = v[0];
                            }
                            return (
                              <option
                                value={value}
                                selected={
                                  this.props.filterCondition[k] == value
                                }
                              >
                                {v}
                              </option>
                            );
                          })}
                        </select>
                      </td>
                    </tr>
                  </React.Fragment>
                );
              })}
            </table>
          </div>
        );
      }
    }

    function loadResultList() {
      const tempDir = shell.ExpandEnvironmentStrings("%temp%");
      const dataFolder = fs.getFolder(tempDir + "\\test_result");
      const e = new Enumerator(dataFolder.files);

      const header = [];
      const body = [];
      const paramListMap = {}; // key: param name, value: param value list for parameter filter

      for (; !e.atEnd(); e.moveNext()) {
        // skip no csv file
        const f = e.item();
        if (!_.endsWith(f.name, ".csv")) {
          continue;
        }

        // open csv file
        const file = fs.openTextFile(
          tempDir + "\\test_result\\" + f.name,
          1,
          false,
          0
        );

        // read all lines
        const all = file.readAll();
        const allLines = all.split("\r\n");
        const lastLine = allLines[allLines.length - 2];
        file.close();

        // extract header names
        if (header.length == 0) {
          for (let i = 0; i < allLines.length; i++) {
            const line = allLines[i];
            if (!_.startsWith(line, "#")) {
              break;
            }
            const keyValue = line.substr(1).split("=");
            header.push(keyValue[0]);
          }
          header.push(CSV_KEY_GRID_BUY_COUNT);
          header.push(CSV_KEY_GRID_BUY_PROFIT);
          header.push(CSV_KEY_GRID_SELL_COUNT);
          header.push(CSV_KEY_GRID_SELL_PROFIT);
          header.push(CSV_KEY_HEDGE_BUY_COUNT);
          header.push(CSV_KEY_HEDGE_BUY_PROFIT);
          header.push(CSV_KEY_HEDGE_SELL_COUNT);
          header.push(CSV_KEY_HEDGE_SELL_PROFIT);
          header.push(CSV_KEY_BALANCE);
          header.push(CSV_KEY_MARGIN);
        }

        // create data object per one line
        const columns = [];
        const paramMap = {};
        for (let i = 0; i < allLines.length; i++) {
          const line = allLines[i];
          if (!_.startsWith(line, "#")) {
            break;
          }
          const keyValue = line.substr(1).split("=");
          columns.push(keyValue[1]);
          paramMap[keyValue[0]] = keyValue[1];
        }
        const values = lastLine.split(",");
        values.shift();
        columns.push(...values);
        body.push({ fileName: f.name, data: columns, condition: paramMap });

        // create param list map
        Object.keys(paramMap).forEach((paramKey) => {
          const paramValue = paramMap[paramKey];
          if (!(paramKey in paramListMap)) {
            paramListMap[paramKey] = [];
          }
          const paramList = paramListMap[paramKey];
          if (!_.includes(paramList, paramValue)) {
            paramList.push(paramValue);
          }
        });
      }

      return {
        header,
        body,
        paramListMap,
      };
    }

    function loadCsv(csvFileName) {
      const chartData = [];
      const header = [];
      header.push(
        CSV_KEY_DATE,
        CSV_KEY_GRID_BUY_COUNT,
        CSV_KEY_GRID_BUY_PROFIT,
        CSV_KEY_GRID_SELL_COUNT,
        CSV_KEY_GRID_SELL_PROFIT,
        CSV_KEY_HEDGE_BUY_COUNT,
        CSV_KEY_HEDGE_BUY_PROFIT,
        CSV_KEY_HEDGE_SELL_COUNT,
        CSV_KEY_HEDGE_SELL_PROFIT,
        CSV_KEY_BALANCE,
        CSV_KEY_MARGIN
      );

      const dir = shell.ExpandEnvironmentStrings("%temp%");
      const file = fs.openTextFile(
        dir + "\\test_result\\" + csvFileName,
        1,
        false,
        0
      );

      while (!file.atEndOfStream) {
        const line = file.readLine();
        const headChar = line[0];
        if (headChar == "#") {
          continue;
        }
        const columns = line.split(",");
        const rowObj = {};
        for (let i = 0; i < columns.length; i++) {
          rowObj[header[i]] = columns[i];
        }
        chartData.push(rowObj);
      }
      file.close();

      return chartData;
    }
  </script>
  <body>
    <div id="root"></div>
  </body>
</html>
