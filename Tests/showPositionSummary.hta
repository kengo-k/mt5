<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=EDGE" />
    <title>MT5 back test optimization result</title>
    <style>
      html {
        width: 100%;
        height: 100%;
      }
      body {
        width: 100%;
        height: 100%;
      }
      #container {
        margin: auto;
        width: 98%;
        height: 98%;
      }
    </style>
  </head>
  <script
    src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"
    integrity="sha512-WFN04846sdKMIP5LKNphMaWzU7YpMyCU245etK3g/2ARYbPK9Ub18eG+ljU96qKRCWh+quCY7yefSmlkQw1ANQ=="
    crossorigin="anonymous"
    referrerpolicy="no-referrer"
  ></script>
  <script
    src="https://code.jquery.com/jquery-3.6.0.min.js"
    integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="
    crossorigin="anonymous"
  ></script>
  <script
    src="https://cdnjs.cloudflare.com/ajax/libs/highcharts/10.1.0/highcharts.js"
    integrity="sha512-8mNMOCKB2dbqlbvEAC4C4aMIioDavSLzEHF4P/A+V8ODWoaRnBz4zar7CGM8o1teyAV1sI7n6NhMLfgNZThWIA=="
    crossorigin="anonymous"
    referrerpolicy="no-referrer"
  ></script>
  <script src="https://code.highcharts.com/modules/exporting.js"></script>
  <script src="https://code.highcharts.com/modules/offline-exporting.js"></script>
  <script src="https://code.highcharts.com/modules/export-data.js"></script>
  <script>
    const shell = new ActiveXObject("WScript.Shell");
    const fs = new ActiveXObject("Scripting.FileSystemObject");
    var chart;
    var header = [];
    var body = [];

    $(function () {
      loadCsv();
      showChart();
    });

    function extract(label, conv) {
      return _.map(body, function (lineObj) {
        var ret = lineObj[label];
        if (conv != null) {
          ret = conv(ret);
        }
        return ret;
      });
    }

    function max(label) {
      const values = extract(label, Number);
      return _.max(values);
    }

    function min(label) {
      const values = extract(label, Number);
      return _.min(values);
    }

    function loadCsv() {
      header.push(
        "date",
        "gridBuyCount",
        "gridBuyProfit",
        "gridSellCount",
        "gridSellProfit",
        "hedgeBuyCount",
        "hedgeBuyProfit",
        "hedgeSellCount",
        "hedgeSellProfit"
      );
      const dir = shell.ExpandEnvironmentStrings("%temp%");
      const file = fs.openTextFile(dir + "\\position_summary.csv", 1, false, 0);
      var i = 0;
      while (!file.atEndOfStream) {
        const line = file.readLine();
        const bs = line.split(",");
        const lineObj = {};
        for (var i = 0; i < bs.length; i++) {
          lineObj[header[i]] = bs[i];
        }
        body.push(lineObj);
      }
      file.close();
    }

    function showChart() {
      const gridBuyProfit = extract("gridBuyProfit", Number);
      const gridSellProfit = extract("gridSellProfit", Number);
      const hedgeBuyProfit = extract("hedgeBuyProfit", Number);
      const hedgeSellProfit = extract("hedgeSellProfit", Number);
      const minmax = [];
      minmax.push(Math.abs(_.max(gridBuyProfit)));
      minmax.push(Math.abs(_.min(gridBuyProfit)));
      minmax.push(Math.abs(_.max(gridSellProfit)));
      minmax.push(Math.abs(_.min(gridSellProfit)));
      minmax.push(Math.abs(_.max(hedgeBuyProfit)));
      minmax.push(Math.abs(_.min(hedgeBuyProfit)));
      minmax.push(Math.abs(_.max(hedgeSellProfit)));
      minmax.push(Math.abs(_.min(hedgeSellProfit)));
      const minmaxmax = _.max(minmax);

      chart = Highcharts.chart("container", {
        chart: {
          zoomType: "xy",
        },
        xAxis: [
          {
            categories: extract("date"),
            crosshair: true,
          },
        ],
        yAxis: [
          {
            title: {
              text: "Position Count",
            },
            labels: {
              format: "{value}",
            },
          },
          {
            title: {
              text: "Profit",
            },
            min: minmaxmax * -1,
            max: minmaxmax,
            opposite: true,
          },
        ],
        series: [
          {
            name: "profit(grid buy)",
            type: "spline",
            yAxis: 1,
            data: gridBuyProfit,
            zIndex: 2,
            color: "red",
          },
          {
            name: "pos count (grid buy)",
            type: "column",
            yAxis: 0,
            data: extract("gridBuyCount", Number),
            zIndex: 1,
            color: "red",
          },
          {
            name: "profit(grid sell)",
            type: "spline",
            yAxis: 1,
            data: gridSellProfit,
            zIndex: 2,
            color: "blue",
          },
          {
            name: "pos count (grid sell)",
            type: "column",
            yAxis: 0,
            data: extract("gridSellCount", Number),
            zIndex: 1,
            color: "blue",
          },
          {
            name: "profit (hedge buy)",
            type: "spline",
            yAxis: 1,
            data: hedgeBuyProfit,
            zIndex: 2,
            color: "green",
          },
          {
            name: "pos count (hedge buy)",
            type: "column",
            yAxis: 0,
            data: extract("hedgeBuyCount", Number),
            zIndex: 1,
            color: "green",
          },
          {
            name: "profit (hedge sell)",
            type: "spline",
            yAxis: 1,
            data: hedgeSellProfit,
            zIndex: 2,
            color: "orange",
          },
          {
            name: "pos count (hedge sell)",
            type: "column",
            yAxis: 0,
            data: extract("hedgeSellCount", Number),
            zIndex: 1,
            color: "orange",
          },
        ],
        plotOptions: {
          spline: {
            lineWidth: 5,
          },
          column: {
            stacking: "normal",
            dataLabels: {
              enabled: false,
            },
          },
        },
        exporting: {
          sourceWidth: 1280,
          sourceHeight: 720,
          scale: 1,
        },
      });
    }
  </script>
  <body>
    <div id="container"></div>
  </body>
</html>
