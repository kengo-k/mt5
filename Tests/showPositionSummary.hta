<!DOCTYPE html>
<html lang="ja">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=EDGE" />
    <meta charset="utf-8" />
    <title>MT5 test result viewer</title>
    <style>
      html {
        width: 100%;
        height: 100%;
      }
      body {
        width: 100%;
        height: 100%;
        font-family: "メイリオ";
      }
      #chartSettings {
      }
      #chartSettings fieldset {
        float: left;
      }
      #chartSettings fieldset.disabled {
        background-color: #cccccc;
      }
      #fileSelection {
        float: left;
      }
      #csvFileIndex {
        width: 40px;
        text-align: right;
      }
      #fileFilter {
        float: left;
      }
      #chart {
        float: left;
        width: 80%;
        height: 1700px;
      }
      .clearfix:after {
        content: "";
        display: block;
        clear: both;
      }
      .clearfix:before {
        content: "";
        display: block;
        clear: both;
      }
      .clearfix {
        display: block;
        width: 100%;
        height: 100%;
      }
    </style>
  </head>
  <!-- prettier-ignore -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js" integrity="sha512-WFN04846sdKMIP5LKNphMaWzU7YpMyCU245etK3g/2ARYbPK9Ub18eG+ljU96qKRCWh+quCY7yefSmlkQw1ANQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <!-- prettier-ignore -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
  <!-- prettier-ignore -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highcharts/10.1.0/highcharts.js" integrity="sha512-8mNMOCKB2dbqlbvEAC4C4aMIioDavSLzEHF4P/A+V8ODWoaRnBz4zar7CGM8o1teyAV1sI7n6NhMLfgNZThWIA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script src="https://code.highcharts.com/modules/exporting.js"></script>
  <script src="https://code.highcharts.com/modules/offline-exporting.js"></script>
  <script src="https://code.highcharts.com/modules/export-data.js"></script>
  <!-- prettier-ignore -->
  <script src="https://unpkg.com/react@16/umd/react.development.js" crossorigin></script>
  <!-- prettier-ignore -->
  <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js" crossorigin></script>
  <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>

  <script type="text/babel">
    const shell = new ActiveXObject("WScript.Shell");
    const fs = new ActiveXObject("Scripting.FileSystemObject");

    // HighChart object
    let chart = null;

    $(function () {
      const root = $("#root");
      ReactDOM.render(<RootComponent />, root[0]);
    });

    function showChart(chartSettings, csvInfo) {
      const extract = (label, conv) => {
        return _.map(csvInfo.body, function (lineObj) {
          var ret = lineObj[label];
          if (conv != null) {
            ret = conv(ret);
          }
          return ret;
        });
      };

      const max = (label) => {
        const values = extract(label, Number);
        return _.max(values);
      };

      const min = (label) => {
        const values = extract(label, Number);
        return _.min(values);
      };

      const gridBuyProfit = extract("gridBuyProfit", Number);
      const gridSellProfit = extract("gridSellProfit", Number);
      const hedgeBuyProfit = extract("hedgeBuyProfit", Number);
      const hedgeSellProfit = extract("hedgeSellProfit", Number);
      const balance = extract("balance", Number);
      const freeMargin = extract("freeMargin", Number);
      const profitMinMax = [];
      const accountMax = [];
      profitMinMax.push(Math.abs(_.max(gridBuyProfit)));
      profitMinMax.push(Math.abs(_.min(gridBuyProfit)));
      profitMinMax.push(Math.abs(_.max(gridSellProfit)));
      profitMinMax.push(Math.abs(_.min(gridSellProfit)));
      profitMinMax.push(Math.abs(_.max(hedgeBuyProfit)));
      profitMinMax.push(Math.abs(_.min(hedgeBuyProfit)));
      profitMinMax.push(Math.abs(_.max(hedgeSellProfit)));
      profitMinMax.push(Math.abs(_.min(hedgeSellProfit)));
      accountMax.push(_.max(balance));
      accountMax.push(_.max(freeMargin));
      const profitMinMaxMax = _.max(profitMinMax);
      const accountMaxMax = _.max(accountMax);
      const targetItemIndexMap = {};
      const targetItems = [];
      let targetItemIndex = 0;
      if (chartSettings.accountChecked) {
        targetItemIndexMap["account"] = targetItemIndex++;
        targetItems.push("account");
      }
      if (chartSettings.positionCountChecked) {
        targetItemIndexMap["positionCount"] = targetItemIndex++;
        targetItems.push("positionCount");
      }
      if (chartSettings.positionProfitChecked) {
        targetItemIndexMap["positionProfit"] = targetItemIndex++;
        targetItems.push("positionProfit");
      }
      const createYAxis = function () {
        const yAxis = targetItems.map((item, i) => {
          let axis;
          if (item == "account") {
            axis = {
              title: { text: "口座残高(USD)" },
              min: 0,
              max: accountMaxMax,
            };
          }
          if (item == "positionCount") {
            axis = { title: { text: "ポジション数" } };
          }
          if (item == "positionProfit") {
            axis = {
              title: { text: "損益(pips)" },
              min: profitMinMaxMax * -1,
              max: profitMinMaxMax,
            };
          }
          if (i == 1) {
            axis.opposite = true;
          }
          return axis;
        });
        return yAxis;
      };
      // prettier-ignore
      const createSeries = function () {
        const seriesList = [];
        const createSeriesItem = (name, type, yAxis, data, zIndex, color) => {
          return { name, type, yAxis, data, zIndex, color, };
        };
        const createProfitSeriesItem = (use, name, data, color) => {
          if (use && targetItemIndexMap["positionProfit"] != null) {
            const item = createSeriesItem(name, "spline", targetItemIndexMap["positionProfit"], data, 2, color);
            seriesList.push(item);
          }
        };
        const createCountSeriesItem = (use, name, data, color) => {
          if (use && targetItemIndexMap["positionCount"] != null) {
            const item = createSeriesItem(name, "column", targetItemIndexMap["positionCount"], data, 1, color);
            seriesList.push(item);
          }
        };
        const createAccountSeriesItem = (use, name, data, color) => {
          if (use && targetItemIndexMap["account"] != null) {
            const item = createSeriesItem(name, "area", targetItemIndexMap["account"], data, 1, color);
            seriesList.push(item);
          }
        };
        createProfitSeriesItem(chartSettings.gridBuyProfitChecked, "損益(グリッド/買)", gridBuyProfit, "red");
        createCountSeriesItem(chartSettings.gridBuyCountChecked, "ポジション数(グリッド/買)", extract("gridBuyCount", Number), "red");
        createProfitSeriesItem(chartSettings.gridSellProfitChecked, "損益(グリッド/売)", gridSellProfit, "blue");
        createCountSeriesItem(chartSettings.gridSellCountChecked, "ポジション数(グリッド/売)", extract("gridSellCount", Number), "blue");
        createProfitSeriesItem(chartSettings.hedgeBuyProfitChecked, "損益(ヘッジ/買)", hedgeBuyProfit, "green");
        createCountSeriesItem(chartSettings.hedgeBuyCountChecked, "ポジション数(ヘッジ/買)", extract("hedgeBuyCount", Number), "green");
        createProfitSeriesItem(chartSettings.hedgeSellProfitChecked, "損益(ヘッジ/売)", hedgeSellProfit, "orange");
        createCountSeriesItem(chartSettings.hedgeSellCountChecked, "ポジション数(ヘッジ/売)", extract("hedgeSellCount", Number), "orange");
        createAccountSeriesItem(chartSettings.balanceChecked, "残高", balance, "mistyrose");
        createAccountSeriesItem(chartSettings.freeMarginChecked, "余裕証拠金", freeMargin, "lightblue");
        return seriesList;
      };

      const yAxis = createYAxis();
      const series = createSeries();
      chart = Highcharts.chart("chart", {
        chart: {
          zoomType: "xy",
        },
        title: {
          text: csvInfo.paramString,
        },
        xAxis: [
          {
            categories: extract("date"),
            crosshair: true,
          },
        ],
        yAxis: yAxis,
        series: series,
        plotOptions: {
          spline: {
            lineWidth: 5,
          },
          column: {
            stacking: "normal",
            dataLabels: {
              enabled: false,
            },
          },
        },
        exporting: {
          sourceWidth: 1920,
          sourceHeight: 1080,
          scale: 1,
        },
      });
    }

    class ChartSettings {
      constructor() {
        this.accountChecked = true;
        this.balanceChecked = true;
        this.freeMarginChecked = true;

        this.positionCountChecked = false;
        this.gridBuyCountChecked = true;
        this.gridSellCountChecked = true;
        this.hedgeBuyCountChecked = true;
        this.hedgeSellCountChecked = true;

        this.positionProfitChecked = true;
        this.gridBuyProfitChecked = true;
        this.gridSellProfitChecked = true;
        this.hedgeBuyProfitChecked = true;
        this.hedgeSellProfitChecked = true;

        this.getCheckedCount = function () {
          let count = 0;
          if (this.accountChecked) {
            count++;
          }
          if (this.positionCountChecked) {
            count++;
          }
          if (this.positionProfitChecked) {
            count++;
          }
          return count;
        };
      }
    }

    class RootComponent extends React.Component {
      constructor(props) {
        super(props);
        const initialCsvFileIndex = 0;
        const dirInfo = loadDir();
        const csvFiles = dirInfo.allCsvFiles.map((f) => {
          return f.csvFile;
        });
        const csvInfo = loadCsv(csvFiles[initialCsvFileIndex]);
        const initialCsvFileFilterCondition = {};
        Object.keys(dirInfo.paramListMap).forEach((k) => {
          const values = dirInfo.paramListMap[k];
          if (values.length > 1) {
            initialCsvFileFilterCondition[k] = "";
          } else {
            initialCsvFileFilterCondition[k] = values[0];
          }
        });
        this.state = {
          chartSettings: new ChartSettings(),
          csvFileIndex: initialCsvFileIndex,
          csvFiles,
          allCsvFiles: dirInfo.allCsvFiles,
          csvInfo,
          dirInfo,
          csvFileFilterCondition: initialCsvFileFilterCondition,
        };
      }

      render() {
        const updateChartSettings = (obj) => {
          const chartSettings = _.merge({}, this.state.chartSettings, obj);
          this.setState({ chartSettings });
        };
        const setCsvFileIndex = (csvFileIndex) => {
          this.setState({ csvFileIndex });
        };

        const updateCsvFileFilterCondition = (obj) => {
          const csvFileFilterCondition = _.merge(
            {},
            this.state.csvFileFilterCondition,
            obj
          );
          this.setState({ csvFileFilterCondition });

          const csvFiles = this.state.allCsvFiles.filter((f) => {
            let ret = true;
            const keys = Object.keys(csvFileFilterCondition);
            for (let i = 0; i < keys.length; i++) {
              const k = keys[i];
              if (csvFileFilterCondition[k] != "") {
                if (f.condition[k] != csvFileFilterCondition[k]) {
                  ret = false;
                  break;
                }
              }
            }
            return ret;
          });
          this.setState({
            csvFiles: csvFiles.map((f) => {
              return f.csvFile;
            }),
          });
          this.setState({ csvFileIndex: 0 });
        };
        return (
          <React.Fragment>
            <ChartSettingsComponent
              chartSettings={this.state.chartSettings}
              updateChartSettings={updateChartSettings}
            />
            <FileSelectionComponent
              csvFiles={this.state.csvFiles}
              csvFileIndex={this.state.csvFileIndex}
              setCsvFileIndex={setCsvFileIndex}
            />
            <div class="clearfix">
              <FileFilterComponent
                csvFileFilterCondition={this.state.csvFileFilterCondition}
                paramListMap={this.state.dirInfo.paramListMap}
                updateCsvFileFilterCondition={updateCsvFileFilterCondition}
              />
              <ChartComponent
                chartSettings={this.state.chartSettings}
                csvInfo={this.state.csvInfo}
              />
            </div>
          </React.Fragment>
        );
      }
    }

    class ChartComponent extends React.Component {
      constructor(props) {
        super(props);
      }

      componentDidMount() {
        showChart(this.props.chartSettings, this.props.csvInfo);
      }

      componentDidUpdate() {
        showChart(this.props.chartSettings, this.props.csvInfo);
      }

      render() {
        return <div id="chart" />;
      }
    }

    class FileFilterComponent extends React.Component {
      constructor(props) {
        super(props);
      }

      render() {
        return (
          <React.Fragment>
            <table id="fileFilter">
              {Object.keys(this.props.paramListMap).map((k) => {
                const values = _.clone(this.props.paramListMap[k]);
                if (values.length > 1) {
                  values.unshift("");
                }
                const onChange = (e) => {
                  const newValue = e.target.value;
                  this.props.updateCsvFileFilterCondition({ [k]: newValue });
                };
                return (
                  <React.Fragment>
                    <tr>
                      <td>
                        <span>{k}</span>
                      </td>
                      <td>
                        <select
                          onChange={onChange}
                          disabled={values.length == 1}
                        >
                          {values.map((v) => {
                            return (
                              <option
                                value={v}
                                selected={
                                  this.props.csvFileFilterCondition[k] == v
                                }
                              >
                                {v}
                              </option>
                            );
                          })}
                        </select>
                      </td>
                    </tr>
                  </React.Fragment>
                );
              })}
            </table>
          </React.Fragment>
        );
      }
    }

    class FileSelectionComponent extends React.Component {
      constructor(props) {
        super(props);
      }

      render() {
        const onChange = (e) => {
          const index = e.target.value;
          this.props.setCsvFileIndex(index);
        };

        return (
          <React.Fragment>
            <div id="fileSelection">
              <input
                type="number"
                id="csvFileIndex"
                value={this.props.csvFileIndex}
                onChange={onChange}
              />
              /<span>{this.props.csvFiles.length}</span>
              <select size="5" onChange={onChange}>
                {this.props.csvFiles.map((f, i) => {
                  return (
                    <option value={i} selected={i == this.props.csvFileIndex}>
                      {f}
                    </option>
                  );
                })}
              </select>
            </div>
          </React.Fragment>
        );
      }
    }

    class GraphItemGroup extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <React.Fragment>
            <legend>{this.props.label}</legend>
            <label>
              <input
                type="checkbox"
                id="account"
                checked={this.props.checked}
                onClick={this.props.onClick}
                disabled={this.props.disabled}
              />{" "}
              表示する
            </label>
          </React.Fragment>
        );
      }
    }

    class GraphItemSetting extends React.Component {
      constructor(props) {
        super(props);
      }
      render() {
        return (
          <label>
            <input
              type="checkbox"
              id={this.props.itemId}
              checked={this.props.checked}
              disabled={this.props.disabled}
              onClick={this.props.onClick}
            />{" "}
            {this.props.labelText}
          </label>
        );
      }
    }

    class ChartSettingsComponent extends React.Component {
      constructor(props) {
        super(props);
      }

      toggleChecked(checkName) {
        return () => {
          const current = this.props.chartSettings[checkName];
          this.props.updateChartSettings({ [checkName]: !current });
        };
      }

      isDisabled(checkName) {
        return (
          (this.props.chartSettings.getCheckedCount() == 2 &&
            !this.props.chartSettings[checkName]) ||
          (this.props.chartSettings.getCheckedCount() == 1 &&
            this.props.chartSettings[checkName])
        );
      }

      getFieldSetClass(checked) {
        return checked ? "" : "disabled";
      }

      render() {
        return (
          <div id="chartSettings">
            <fieldset
              class={this.getFieldSetClass(
                this.props.chartSettings.accountChecked
              )}
            >
              <GraphItemGroup
                label="口座情報"
                checked={this.props.chartSettings.accountChecked}
                onClick={this.toggleChecked("accountChecked")}
                disabled={this.isDisabled("accountChecked")}
              />
              <hr />
              <GraphItemSetting
                itemId="balance"
                labelText="残高"
                checked={this.props.chartSettings.balanceChecked}
                onClick={this.toggleChecked("balanceChecked")}
                disabled={!this.props.chartSettings.accountChecked}
              />
              <GraphItemSetting
                itemId="freeMargin"
                labelText="証拠金"
                checked={this.props.chartSettings.freeMarginChecked}
                onClick={this.toggleChecked("freeMarginChecked")}
                disabled={!this.props.chartSettings.accountChecked}
              />
            </fieldset>
            <fieldset
              class={this.getFieldSetClass(
                this.props.chartSettings.positionCountChecked
              )}
            >
              <GraphItemGroup
                label="ポジション数"
                checked={this.props.chartSettings.positionCountChecked}
                onClick={this.toggleChecked("positionCountChecked")}
                disabled={this.isDisabled("positionCountChecked")}
              />
              <hr />
              <GraphItemSetting
                itemId="gridBuyCount"
                labelText="グリッド/買"
                checked={this.props.chartSettings.gridBuyCountChecked}
                onClick={this.toggleChecked("gridBuyCountChecked")}
                disabled={!this.props.chartSettings.positionCountChecked}
              />
              <GraphItemSetting
                itemId="gridSellCount"
                labelText="グリッド/売"
                checked={this.props.chartSettings.gridSellCountChecked}
                onClick={this.toggleChecked("gridSellCountChecked")}
                disabled={!this.props.chartSettings.positionCountChecked}
              />
              <GraphItemSetting
                itemId="hedgeBuyCount"
                labelText="ヘッジ/買"
                checked={this.props.chartSettings.hedgeBuyCountChecked}
                onClick={this.toggleChecked("hedgeBuyCountChecked")}
                disabled={!this.props.chartSettings.positionCountChecked}
              />
              <GraphItemSetting
                itemId="hedgeSellCount"
                labelText="ヘッジ/売"
                checked={this.props.chartSettings.hedgeSellCountChecked}
                onClick={this.toggleChecked("hedgeSellCountChecked")}
                disabled={!this.props.chartSettings.positionCountChecked}
              />
            </fieldset>
            <fieldset
              class={this.getFieldSetClass(
                this.props.chartSettings.positionProfitChecked
              )}
            >
              <GraphItemGroup
                label="損益"
                checked={this.props.chartSettings.positionProfitChecked}
                onClick={this.toggleChecked("positionProfitChecked")}
                disabled={this.isDisabled("positionProfitChecked")}
              />
              <hr />
              <GraphItemSetting
                itemId="gridBuyProfit"
                labelText="グリッド/買"
                checked={this.props.chartSettings.gridBuyProfitChecked}
                onClick={this.toggleChecked("gridBuyProfitChecked")}
                disabled={!this.props.chartSettings.positionProfitChecked}
              />
              <GraphItemSetting
                itemId="gridSellProfit"
                labelText="グリッド/売"
                checked={this.props.chartSettings.gridSellProfitChecked}
                onClick={this.toggleChecked("gridSellProfitChecked")}
                disabled={!this.props.chartSettings.positionProfitChecked}
              />
              <GraphItemSetting
                itemId="hedgeBuyProfit"
                labelText="ヘッジ/買"
                checked={this.props.chartSettings.hedgeBuyProfitChecked}
                onClick={this.toggleChecked("hedgeBuyProfitChecked")}
                disabled={!this.props.chartSettings.positionProfitChecked}
              />
              <GraphItemSetting
                itemId="hedgeSellProfit"
                labelText="ヘッジ/売"
                checked={this.props.chartSettings.hedgeSellProfitChecked}
                onClick={this.toggleChecked("hedgeSellProfitChecked")}
                disabled={!this.props.chartSettings.positionProfitChecked}
              />
            </fieldset>
          </div>
        );
      }
    }

    function loadDir() {
      const tempDir = shell.ExpandEnvironmentStrings("%temp%");
      const dataFolder = fs.getFolder(tempDir + "\\test_result");
      const e = new Enumerator(dataFolder.files);
      const allCsvFiles = [];
      // key: param name, value: param value list
      const paramListMap = {};
      for (; !e.atEnd(); e.moveNext()) {
        const f = e.item();
        if (!_.endsWith(f.name, ".csv")) {
          continue;
        }
        const file = fs.openTextFile(
          tempDir + "\\test_result\\" + f.name,
          1,
          false,
          0
        );
        const line = file.readLine();
        const params = line.substr(1).split(",");
        const condition = {};
        params.forEach((p) => {
          const keyValue = p.split("=");
          const key = keyValue[0];
          const value = keyValue[1];
          condition[key] = value;
          if (!(key in paramListMap)) {
            paramListMap[key] = [];
          }
          if (!_.includes(paramListMap[key], value)) {
            paramListMap[key].push(value);
          }
        });
        allCsvFiles.push({ condition, csvFile: f.name });
        file.close();
      }
      return {
        allCsvFiles,
        paramListMap,
      };
    }

    function loadCsv(csvFileName) {
      const header = [];
      const body = [];
      let paramString = "";
      header.push(
        "date",
        "gridBuyCount",
        "gridBuyProfit",
        "gridSellCount",
        "gridSellProfit",
        "hedgeBuyCount",
        "hedgeBuyProfit",
        "hedgeSellCount",
        "hedgeSellProfit",
        "balance",
        "freeMargin"
      );
      const dir = shell.ExpandEnvironmentStrings("%temp%");
      const file = fs.openTextFile(
        dir + "\\test_result\\" + csvFileName,
        1,
        false,
        0
      );
      var i = 0;
      while (!file.atEndOfStream) {
        const line = file.readLine();
        const headChar = line[0];
        if (headChar == "#") {
          paramString = "parameters: " + line.substr(1);
          continue;
        }
        const bs = line.split(",");
        const lineObj = {};
        for (var i = 0; i < bs.length; i++) {
          lineObj[header[i]] = bs[i];
        }
        body.push(lineObj);
      }
      file.close();

      return {
        header,
        body,
        paramString,
      };
    }
  </script>
  <body>
    <div id="root"></div>
  </body>
</html>
